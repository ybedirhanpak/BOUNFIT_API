import mongoose from 'mongoose';
import config from '../config';
import { getMockDatabaseURI, closeMockDatabase } from './mock';

const connectMongoose = async () => {
  const connectionURI = config.isTesting()
    ? await getMockDatabaseURI()
    : config.databaseURL;

  return mongoose.connect(
        connectionURI!,
        {
          useNewUrlParser: true,
          useFindAndModify: false,
          useUnifiedTopology: true,
        },
  )
    .then(() => {
      if (!config.isTesting()) console.log('üëå  Database connection completed. üëå');
    })
    .catch((error) => {
      if (!config.isTesting()) console.log(`‚ùå  Database connection error ${error} ‚ùå`);
    });
};

export const connectDatabase = async () => {
  if (!config.isTesting()) {
    const db = mongoose.connection;

    db.on('connecting', () => {
      console.log('‚è≥  Connecting to Database... ‚è≥');
    });

    db.on('error', (error) => {
      console.log(`‚ùå  Database connection error ${error} ‚ùå`);
      mongoose.disconnect();
    });
    db.on('connected', () => {
      console.log('üÜó  Database connected. üÜó');
    });
    db.once('open', () => {
      console.log('üëç  Database connection opened!. üëç');
    });
    db.on('reconnected', () => {
      console.log('ü§ò  Database reconnected! ü§ò');
    });
    db.on('disconnected', () => {
      console.log('üõë  Database disconnected. Trying to reconnect... üõë');
      connectMongoose();
    });
  }

  return connectMongoose();
};

export const closeDatabase = async () => new Promise((resolve, reject) => {
  if (!config.isTesting()) {
    mongoose.disconnect()
      .then(() => {
        console.log('################################################\n'
                      + '     üêç  Database disconnected successfully. üêç\n'
                      + '################################################\n');
        resolve();
      }).catch((error) => {
        console.log('################################################\n'
                      + `     ‚ùå  Error occured when database tried to disconnect: ${error} ‚ùå\n`
                      + '################################################\n');
        reject();
      });
  } else {
    closeMockDatabase();
  }
});
